// Time Complexity : O(n^2)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No
class MinimizeMalware {
    int n;
    int[] colors;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        this.n = graph.length;
        this.colors = new int[n];
        int clCnt = 0;
        Arrays.fill(colors, -1);
        for(int i = 0; i < n; i++) {
            if(colors[i] == -1) {
                dfs(graph, i, clCnt);
                clCnt++;
            }
        }
        int[] groups = new int[clCnt];
        for(int c : colors) {
            groups[c]++;
        }

        int[] infectedGroups = new int[clCnt];
        for(int no : initial) {
            infectedGroups[colors[no]]++;
        }

        int res = Integer.MAX_VALUE;
        for(int no : initial) {
            int c = colors[no];
            int cnt = infectedGroups[c];
            if(cnt == 1) {
                if(res == Integer.MAX_VALUE) {
                    res = no; 
                } else if(groups[colors[no]] > groups[colors[res]]) {
                    res= no;
                } else if(groups[colors[no]] == groups[colors[res]]) {
                    res = Math.min(no, res);
                }
            }
        }
        if(res == Integer.MAX_VALUE) {
            for(int no : initial) {
                res = Math.min(res, no);
            }
        }
        return res;
    }
    public void dfs(int[][] graph, int i, int clCnt) {
        //base case 
        if(colors[i] != -1) return;

        //logic
        colors[i] = clCnt;
        for(int j = 0; j < n; j++) {
            if(i == j) continue;
            if(graph[i][j] == 1) {
                dfs(graph, j, clCnt);
            }
        }
    }
}